
l = [5, 6, 7, 8, 10, 12, 16, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 
    210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480] #d√©lky

m = [3, 4, 5, 6, 8 ,10 ,12 ,14 ,16 ,18 ,20 ,22 ,24 ,30 ,36 ,42 ,48]

k_assign = {
    3 : 2,
    4 : 2.8,
    5 : 3.5,
    6 : 4,
    8 : 5.3,
    10 : 6.4,
    12 : 7.5,
    14 : 8.8,
    16 : 10,
    18 : 11.5,
    20 : 12.5,
    22 : 14,
    24 : 15,
    30 : 18.7,
    36 : 22.5,
    42 : 26,
    48 : 30
}

l_allowed = {
    3 :  [20, 30],
    4 :  [25, 40],
    5 :  [25, 50],
    6 :  [30, 60],
    8 :  [40, 80],
    10 : [45, 100],
    12 : [50, 120],
    14 : [60, 140],
    16 : [65, 160],
    18 : [70, 180],
    20 : [80, 200],
    22 : [90, 220],
    24 : [90, 240],
    30 : [110, 300],
    36 : [140, 360],
    42 : [160, 440],
    48 : [180, 480],
    
}

smax_assign = {
    3 : 5.5,
    4 : 7,
    5 : 8,
    6 : 10,
    8 : 13,
    10 : 16,
    12 : 18,
    14 : 21,
    16 : 24,
    18 : 27,
    20 : 30,
    22 : 34,
    24 : 36,
    30 : 46,
    36 : 55,
    42 : 65,
    48 : 75
}

class Sroub:
    def __init__(self, M, k, l, smax):
        Sroub.name = f"M{M}"
        Sroub.M = M
        Sroub.k = k
        Sroub.l = l
        Sroub.smax = smax


def sroub_print(M, k, l, smax):
    sroub = Sroub(M, k, l, smax)
    name = [sroub.M, sroub.k, sroub.l, sroub.smax]
    return (f"M{name[0]} - {name[1]}\n k = {name[2]}\n smax = {name[3]}")

def sroub_assign(M):
    if M in m:
        k = k_assign[M]
        smax = smax_assign[M]
        l_possible = []
        for L in l:
            if l_allowed[M][0] <= L <= l_allowed[M][1]:
                l_possible.append(L)
            else:
                pass
        return[M, k, l_possible, smax]
    else:
        return None
