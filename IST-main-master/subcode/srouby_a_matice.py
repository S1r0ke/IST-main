
l = [5, 6, 7, 8, 10, 12, 16, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 
210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480] #d√©lky

m = [3, 4, 5, 6, 8 ,10 ,12 ,14 ,16 ,18 ,20 ,22 ,24 ,30 ,36 ,42 ,48]

k_assign = {
    3 : 2,
    4 : 2.8,
    5 : 3.5,
    6 : 4,
    8 : 5.3,
    10 : 6.4,
    12 : 7.5,
    14 : 8.8,
    16 : 10,
    18 : 11.5,
    20 : 12.5,
    22 : 14,
    24 : 15,
    30 : 18.7,
    36 : 22.5,
    42 : 26,
    48 : 30
}

l_allowed1 = {
    3 :  [20, 30],
    4 :  [25, 40],
    5 :  [25, 50],
    6 :  [30, 60],
    8 :  [40, 80],
    10 : [45, 100],
    12 : [50, 120],
    14 : [60, 140],
    16 : [65, 160],
    18 : [70, 180],
    20 : [80, 200],
    22 : [90, 220],
    24 : [90, 240],
    30 : [110, 300],
    36 : [140, 360],
    42 : [160, 440],
    48 : [180, 480],
}

l_allowed2 = {
    3 :  [6,   30 ],
    4 :  [8,   40 ],
    5 :  [10,  50 ],
    6 :  [12,  60 ],
    8 :  [16,  80 ],
    10 : [20,  100],
    12 : [25,  120],
    14 : [30,  140],
    16 : [30,  200],
    18 : [35,  200],
    20 : [40,  200],
    22 : [45,  200],
    24 : [50,  200],
    30 : [60,  200],
    36 : [70,  200],
    42 : [80,  200],
    48 : [100, 200],
}


smax_assign = {
    3  : 5.5,
    4  : 7,
    5  : 8,
    6  : 10,
    8  : 13,
    10 : 16,
    12 : 18,
    14 : 21,
    16 : 24,
    18 : 27,
    20 : 30,
    22 : 34,
    24 : 36,
    30 : 46,
    36 : 55,
    42 : 65,
    48 : 75
}
e_assign = {
    3 : 6.01,
    4 : 7.66,
    5 : 8.79,
    6 : 11.05,
    8 : 14.38,
    10 : 17.77,
    12 : 20.03,
    14 : 23.35,
    16 : 26.75,
    18 : 19.56,
    20 : 32.95,
    22 : 23.29,
    24 : 39.55,
    30 : 50.85,
    36 : 60.79,
    42 : 71.3,
    48 : 82.6
}

da_assign = {
    3 : 3.45,
    4 : 4.6,
    5 : 5.75,
    6 : 6.75,
    8 : 8.75,
    10 : 10.8,
    12 : 13,
    14 : 15.1,
    16 : 17.3,
    18 : 19.5,
    20 : 21.6,
    22 : 23.7,
    24 : 25.9,
    30 : 32.4,
    36 : 38.9,
    42 : 45.4,
    48 : 51.8,
}


m_assign1 = {
    3  : [2.15, 2.4],
    4  : [2.9, 3.2],
    5  : [4.4, 4.7],
    6  : [4.9, 5.2],
    8  : [6.44, 6.8],
    10 : [8.04, 8.4],
    12 : [10.37, 10.8],
    14 : [12.1, 12.8],
    16 : [14.1, 14.8],
    18 : [15.1, 15.8],
    20 : [16.9, 18],
    22 : [18.1, 19.4],
    24 : [20.2, 21.5],
    30 : [24.3, 25.6],
    36 : [29.4, 31],
    42 : [32.4, 34],
    48 : [36.4, 38],
}


m_assign2 = {
    3  : [1.55, 1.8],
    4  : [1.95, 2.2],
    5  : [2.45, 2.7],
    6  : [2.9, 3.2],
    8  : [3.7, 4],
    10 : [4.7, 5],
    12 : [5.7, 6],
    14 : [6.42, 7],
    16 : [7.42, 8],
    18 : [8.42, 9],
    20 : [9.1, 10],
    22 : [9.9, 11],
    24 : [10.9, 12],
    30 : [13.9, 15],
    36 : [16.9, 18],
    42 : [19.7, 21],
    48 : [22.7, 24],
}

def sroub_assign(M, typ):
    if M in m:
        if typ == "l":
            k = k_assign[M]
            smax = smax_assign[M]
            l_possible = []
            for L in l:
                if l_allowed1[M][0] <= L <= l_allowed1[M][1]:
                    l_possible.append(L)
                else:
                    pass
            return[M, k, l_possible, smax]
        if typ == "s":
            k = k_assign[M]
            smax = smax_assign[M]
            l_possible = []
            for L in l:
                if l_allowed2[M][0] <= L <= l_allowed2[M][1]:
                    l_possible.append(L)
                else:
                    pass
            return[M, k, l_possible, smax]
        else:
            return None

def matice_assign(M, typ):
    if M in m:
        if typ == 1:
            da = da_assign[M]
            mmin = m_assign1[M][0]
            mmax = m_assign1[M][1]
            e = e_assign[M]
            s  = smax_assign[M]
            return[M, da, mmin, mmax, e, s]
        if typ == 2:
            da = da_assign[M]
            mmin = m_assign2[M][0]
            mmax = m_assign2[M][1]
            e = e_assign[M]
            s  = smax_assign[M]
            return[M, da, mmin, mmax, e, s]
    else:
        return None
        
